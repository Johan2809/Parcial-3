package controllers;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;
import model.Estudiante;
import model.TipoGenero;

import java.net.URL;
import java.util.Comparator;
import java.util.ResourceBundle;

public class EstudianteController implements Initializable {



    @FXML
    private TableView<Estudiante> tableEstudiantes;

    @FXML
    private TableColumn<Estudiante, String> columnNombre;

    @FXML
    private TableColumn<Estudiante, String> columnIdentificacion;

    @FXML
    private TableColumn<Estudiante, TipoGenero> columnGenero;

    @FXML
    private TableColumn<Estudiante, Double> columnNota1;

    @FXML
    private TableColumn<Estudiante, Double> columnNota2;

    @FXML
    private TableColumn<Estudiante, Double> columnNota3;

    @FXML
    private TableColumn<Estudiante, Double> columnNota4;

    @FXML
    private TableColumn<Estudiante, Double> columnPromedio;

    @FXML
    private TextField txtNombreEstudiante;

    @FXML
    private ComboBox<TipoGenero> TipoGeneroComboBox;

    @FXML
    private TextField txtIdentificacion;

    @FXML
    private TextField txtNota1;

    @FXML
    private TextField txtNota2;

    @FXML
    private TextField txtNota3;

    @FXML
    private TextField txtNota4;

    @FXML
    private Button btnAgregar;

    @FXML
    private Button btnMostrarEstudiantes;

    @FXML
    private Button btnCalcularPromedioEstudiante;

    @FXML
    private Button btnCalcularPromedioGeneral;

    @FXML
    private Button btnMostrarMejorEstudiante;

    private ObservableList<Estudiante> listaEstudiantesDiplomado;

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        listaEstudiantesDiplomado = FXCollections.observableArrayList();
        initializeTableColumns();
        initializeTipoGeneroComboBox();
        tableEstudiantes.setItems(listaEstudiantesDiplomado);
    }

    private void initializeTableColumns() {
        columnNombre.setCellValueFactory(new PropertyValueFactory<>("nombre"));
        columnIdentificacion.setCellValueFactory(new PropertyValueFactory<>("identificacion"));
        columnGenero.setCellValueFactory(new PropertyValueFactory<>("genero"));
        columnNota1.setCellValueFactory(new PropertyValueFactory<>("nota1"));
        columnNota2.setCellValueFactory(new PropertyValueFactory<>("nota2"));
        columnNota3.setCellValueFactory(new PropertyValueFactory<>("nota3"));
        columnNota4.setCellValueFactory(new PropertyValueFactory<>("nota4"));
        columnPromedio.setCellValueFactory(new PropertyValueFactory<>("promedio"));
    }

    private void initializeTipoGeneroComboBox() {
        TipoGeneroComboBox.setItems(FXCollections.observableArrayList(TipoGenero.values()));
    }

    @FXML
    void agregarEstudianteEvent(ActionEvent event) {
        agregarEstudianteDiplomado();
    }

    private void agregarEstudianteDiplomado() {
        String nombres = txtNombreEstudiante.getText();
        TipoGenero genero = TipoGeneroComboBox.getValue();
        String identificacion = txtIdentificacion.getText();
        double nota1 = Double.parseDouble(txtNota1.getText());
        double nota2 = Double.parseDouble(txtNota2.getText());
        double nota3 = Double.parseDouble(txtNota3.getText());
        double nota4 = Double.parseDouble(txtNota4.getText());

        Estudiante estudiante = new Estudiante(nombres, genero, identificacion, nota1, nota2, nota3, nota4,0.0, null);
        calcularPromedio(estudiante);
        listaEstudiantesDiplomado.add(estudiante);

        // Limpiar los campos de entrada
        txtNombreEstudiante.clear();
        TipoGeneroComboBox.getSelectionModel().clearSelection();
        txtIdentificacion.clear();
        txtNota1.clear();
        txtNota2.clear();
        txtNota3.clear();
        txtNota4.clear();
    }

    private void calcularPromedio(Estudiante estudiante) {
        double promedio = (estudiante.getNota1() + estudiante.getNota2() + estudiante.getNota3() + estudiante.getNota4()) / 4;
        estudiante.setPromedio(promedio);
    }

    @FXML
    void mostrarEstudiantes(ActionEvent event) {
        for (Estudiante estudiante : listaEstudiantesDiplomado) {
            System.out.println("Nombre: " + estudiante.getNombre());
            System.out.println("Género: " + estudiante.getGenero());
            System.out.println("Identificación: " + estudiante.getIdentificacion());
            System.out.println("Notas: " + estudiante.getNota1() + ", " + estudiante.getNota2() + ", " + estudiante.getNota3() + ", " + estudiante.getNota4());
            System.out.println("Promedio: " + estudiante.getPromedio());
            System.out.println("-------------------------");
        }
    }

    @FXML
    void calcularPromedioEstudiante(ActionEvent event) {
        String identificacion = txtIdentificacion.getText();
        Estudiante estudiante = buscarEstudiantePorIdentificacion(identificacion);
        if (estudiante != null) {
            double promedio = estudiante.getPromedio();
            System.out.println("El promedio de notas del estudiante con identificación " + identificacion + " es: " + promedio);
        } else {
            System.out.println("No se encontró ningún estudiante con la identificación " + identificacion);
        }
    }

    @FXML
    void calcularPromedioGeneral(ActionEvent event) {
        double sumaPromedios = 0;
        int totalEstudiantes = listaEstudiantesDiplomado.size();

        for (Estudiante estudiante : listaEstudiantesDiplomado) {
            sumaPromedios += estudiante.getPromedio();
        }

        double promedioGeneral = sumaPromedios / totalEstudiantes;
        System.out.println("El promedio general de notas es: " + promedioGeneral);
    }

    @FXML
    void mostrarMejorEstudiante(ActionEvent event) {
        Estudiante mejorEstudiante = listaEstudiantesDiplomado.stream()
                .max(Comparator.comparingDouble(Estudiante::getPromedio))
                .orElse(null);

        if (mejorEstudiante != null) {
            String nombreMejorEstudiante = mejorEstudiante.getNombre();
            System.out.println("El estudiante con el promedio de notas más alto es: " + nombreMejorEstudiante);
        } else {
            System.out.println("No hay estudiantes inscritos en el diplomado");
        }
    }

    private Estudiante buscarEstudiantePorIdentificacion(String identificacion) {
        for (Estudiante estudiante : listaEstudiantesDiplomado) {
            if (estudiante.getIdentificacion().equals(identificacion)) {
                return estudiante;
            }
        }
        return null;
    }

    public void setStage(Stage primaryStage)
}
